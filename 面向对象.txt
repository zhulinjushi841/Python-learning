面向对象(OOP)基本概念
面向对象编程——Object Oriented Programming 简写为OOP
目标
了解面向对象 基本概念
01.面向对象基本概念
我们之前学习的编程方式就是 面向过程的
面向过程 和 面向对象 是两种不同的编程方式
对比 面向过程的特点，可以更好地了解什么是面向对象

1.1过程和函数(科普)
过程是一个早期的编程概念
过程 类似于函数，只能执行，但是没有返回值
函数 不仅能执行，而且还可以返回结果

1.2面向过程 和 面向对象 基本概念
1)面向过程——怎么做？
1.把完成某一个需求的所有步骤 从头到尾 逐步实现
2.根据开发需求，把某些功能独立的代码 封装 成一个又一个 函数
3.最后完成的代码，就是顺序地调用 不同的函数
特点
1.注重 步骤和过程，不注重职责分工
2.如果需求复杂，代码会变得很复杂
3.开发复杂项目，没有固定的套路，开发难度很大。

2)面向对象——谁来做？
相比较函数，面向对象 是 更大 的封装，根据 职责 在 一个对象中 封装多个方法
1.在完成某一个需求前，首先确定 职责——要做的事情(方法)
2.根据 职责 确定不同的 对象，在 对象 内部封装不同的 方法(多个)
3.最后完成的代码，就是顺序地让 不同的对象 调用 不用的方法
特点
1.注重 对象和职责，不同的对象承担不同的职责
2.更加适合应对复杂的需求变化，是专门应对复杂项目开发，提供的固定套路
3.需要在面向过程基础上，再学习一些面向对象的语法



类和对象
目标
类和对象的概念
类和对象的关系
类的设计
01.类和对象的概念
类 和 对象 是 面向对象编程的 两个 核心概念
1.1类
类 是一群具有 相同 特征 或者 行为 的事物的一个统称，是抽象的，不能够直接使用
特征 被称为 属性
行为 被称为 方法
类 就相当于制造飞机时的图纸，是一个模板，是 负责创建对象的
1.2对象
对象 是由 类创建出来的一个具体存在，可以直接使用
由 哪个类 创建出来的 对象，就拥有在 哪一个类 中定义的：
属性
方法
对象 就相当于用 图纸 制造的飞机
在程序开发中，应该先有类，再有对象
02.类和对象的而关系
类 只有一个，而对象 可以有很多个 
不同的对象之间 属性 可能会各不相同
类 中定义了什么 属性和方法，对象 中就有什么属性和方法，不可能多，也不可能少
03.类的设计
在使用面向对象开发之前，应该首先分析需求，确定一下，程序中需要包含哪些类
在程序开发中，需要设计一个类，通常需要满足一下三个要素：
1.类名 这类事物的名字 满足大驼峰命名法
2.属性 这类事物具有什么样的特征
3.方法 这类事物具有什么样的行为

大驼峰命名法
Capwords
1.每一个单词的首字母大写
2.单词与单词之间没有下划线

3.1类名的确定
名词提炼法 分析 整个业务流程，出现的 名词，通常就是找到的类
3.2属性和方法的确定
对 对象的特征描述，通常可以定义成  属性
对象具有的行为(动词)，通常可以定义为  方法
提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑


面向对象基础语法

目标
dir内置函数
定义简单的类(只包含方法)
方法中的self参数
初始化方法
内置方法和属性

01.dir内置函数(知道)
在Python中对象几乎是无处不在的，我们之前学习的变量、数据、函数都是对象
在Python中可以使用以下两个方法验证：
1.在标识符/数据 后输入一个.，然后按下TAB键，iPython会提示该对象能够调用的 方法列表
2.使用内置函数dir传入 标识符/数据，可以查看对象内的 所有属性及方法
提示 __方法名__格式是Python提供的 内置方法/属性

02.定义简单的类(只包含方法)
面向对象 是 更大 的封装，在 一个类中 封装 多个方法，这样 通过这个类创建出来的对象，就可以直接调用这些方法。
2.1 定义只包含方法的类
在Python中要定义一个只包含方法的类，语法格式如下：
class 类名：
	def 方法1(self, 参数列表)：
		pass
	def 方法2(self, 参数列表)：
		pass
方法 的定义格式和之前学习过的 函数 几乎一样
区别在于 第一个参数据必须是self

2.2创建对象
当一个类定义完成之后，需要使用这个类来创建对象，语法格式如下：
对象变量 = 类名()

引用概念的调用
在面向对象开发中，引用的概念是同样适用的
在Python中使用 类 创建对象之后，tom变量中 仍然记录的是 对象在内存中的地址
也就是tom变量 引用了 新建的猫对象
使用print函数输出 对象变量，默认情况下，是能够输出这个变量 引用的对象 是由哪一个类创建的对象，以及
在内存中的地址(十六进制表示)
提示：在计算机中，通常使用十六进制 表示 内存地址
十进制 和 十六进制 都是用来表达数字的，只是表达的方式不一样
十进制 和 十六进制的数字之间可以来回转换
%d可以以10进制 输出数字
%x可以以16进制 输出数字

03.方法中的self参数
3.1案例改造——给对象增加属性
在Python中，要 给对象设置属性，非常地容易，但是不推荐使用
因为：对象属性的封装应该封装在类的内部
只需要在 类的外部的代码中 直接通过.设置一个属性即可
可以使用 .属性名 利用赋值语句给变量名添加临时属性


04.初始化方法
4.1之前代码存在的问题——在类的外部给对象增加属性
提示：
在日常开发中，不推荐在 类的外部 给对象增加属性
如果在运行的时候，没有找到属性，程序会报错
对象应当包含有哪些属性，应该 封装在类的内部

4.2初始化方法
当使用 类名() 创建对象的时候，会 自动 执行以下操作：
1.为对象在内存中 分配空间 ——创建对象
2.为对象的属性 设置初始值——初始化方法(init)
这个 初始化方法 就是 __init__方法，__init__就是对象的内置方法
__init__方法是 专门 用来定义一个类 具有哪些属性的方法

4.3 在初始化方法内部定义属性
在__init__方法内部使用 self.属性名 = 属性的初始值 就可以 定义属性
定义属性之后，再使用Cat类创建的对象，都会拥有该属性

4.4改造初始化方法——初始化的同时设置初始值
在开发中，如果希望在 创建对象的同时，就设置对象的属性，可以对__init__方法进行改造
1.把希望设置的属性值，定义成 __init__方法的参数
2.在方法内部使用self.属性 = 形参 接收外部传递的参数
3.在创建对象时，使用 类名(属性1，属性2...)调用

05.内置方法和属性
5.1__del__方法(知道)
在Python中
当使用 类名() 创建对象时，为对象 分配完空间之后，自动调用 __init__方法
当一个对象被从内存中销毁 前，会自动调用 __del__方法
应用场景
__init__改造初始化方法，可以让创建对象更加灵活
__del__如果希望对象被销毁前，在做一些事情，可以考虑以下__del__ 方法
生命周期
一个对象从调用 类名()创建，生命周期开始
一个对象的 __del__方法一旦被调用，生命周期结束
在对象的生命周期内，可以访问对象属性，或者让对象调用方法

5.2__str__方法
在Python中，使用print函数输出 对象变量，默认情况下，会输出这个变量 引用的对象 是由哪一个类
创建的对象，以及 在内存中的地址(十六进制表示)
如果在开发中，希望使用print函数输出 对象变量 时，能够打印自定义的内容，就可以利用__str__这个内置方法
注意：__str__方法必须返回一个字符串

面向对象封装案例
目标 
封装
小明爱跑步
存放家具
提示：
在 对象的方法内部，是可以 直接访问对象的属性的
同一个类 创建的 多个对象 之间，属性 互不干扰！

#Python 能够自动地将一对括号内部的代码连接在一起


01.封装
封装 是面向对象编程的一大特点
面向对象变成的第一步——将属性 和 方法 封装到 一个抽象的 类 中
外界 使用 类 创建 对象，然后 让对象调用方法
对象方法的细节 都被封装在 类的内部

私有属性和私有方法
01.应用场景及定义方式
应用场景
在实际开发中，对象 的某些属性或者方法 可能只希望 在对象的内部被使用，而不希望在外部被访问到
私有属性 就是 对象 不希望公开的 属性
私有方法 就是 对象 不希望公开的方法
定义方式
在定义属性或者方法的时候，在 属性名或者方法名前 增加两个下划线，定义的就是 私有 属性或方法

02.伪私有属性和私有方法(科普)
提示：在日常开发中，不要使用这种方式，访问对象的 私有属性 或者 私有方法
Python中，并没有 真正意义的 私有
在给 属性 方法 命名时，实际是对 名称 做了一些特殊处理，使得外界无法访问到
处理方式：在 名称 前面加上 _类名 => _类名__名称



