01.类的结构
1.1 术语——实例
1.使用面向对象开发，第1步 是设计 类
2.使用 类名() 创建对象，创建对象 的动作有两步：

1）在内存中为对象 分配空间
2）调用初始化方法 __init__ 为对象初始化
3.对象创建后，内存 中就有了一个对象的实实在在的存在 --实例

类名()	——————>   __init__ 定义
			           实例属性
对象名.方法名()——>	实例方法(self)

	对象1		对象2		对象n
	属性1		属性1		属性1
	属性2		属性2		属性2

因此，通常也会把：
1.创建出来的 对象 叫做 类 的实例
2.创建对象的 动作 叫做 实例化
3.对象的属性 叫做 实例属性
4.对象调用的方法 叫做 实例方法

在程序执行时：
1.对象各自拥有自己的 实例属性
2.调用对象方法，可以通过self.
访问自己的属性
调用自己的方法

结论
每一个对象 都有自己 独立的内存空间，保存着各自不同的属性
多个对象的方法，在内存中只有一份，在调用方法时，需要把对象的引用 传递到方法内部


1.2 类是一个特殊的对象
Python中 一切皆对象：
class AAA:  定义的类 属于 类对象
obj1 = AAA() 属于 实例对象

在程序运行时，类 同样会被加载到内存
在Python中，类 是一个特殊的对象——类对象
在程序运行时，类对象 在内存中 只有一份，使用 一个类 可以创建出 很多个对象实例
除了 封装 实例 的属性 和 方法外，类对象 还可以拥有自己的 属性 和 方法
1.类属性
2.类方法
通过 类名. 的方式可以 访问类的属性 或者 调用类的方法
							_ _  _ _ _ 
类名.属性————>	类属性
类名.方法名()——>		类方法(cls)		该类的所有对象共享
类名()——————>	__init__定义		通过类名直接访问
							_ _  _ _ _ 
				实例属性
对象名.方法名()——>	实例方法(self)

在对象的内存空间中 保存着不同的对象各自不同的属性
而对象的实例方法是保存在类的内存空间中
当对象调用实例方法时，该对象会把自己的引用当做参数传递给这个方法