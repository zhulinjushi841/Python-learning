01 模块
1.1 模块的概念
模块是Python程序架构的一个核心概念
每一个以扩展名py结尾的Python源代码文件都是一个 模块
模块名 同样也是一个标识符，需要符合标志符的命名规则(必须以数字、字母和下划线组成，同时标识符不能以数字为开头)
在模块中定义的 全局变量、函数、类 都是提供给外界直接使用的 工具
模块 就好比是 工具包，要想使用这个工具包中的工具，就需要先 导入 这个模块
1.2 模块的两种导入方式
1）import导入
import 模块名1，模块名2
提示：
在导入模块时，每个导入应该独占一行
import 模块名1
import 模块名2

导入之后
通过 模块名. 使用 模块提供的工具——全局变量、函数、类
使用as指定模块的别名
如果模块的名字太长，可以使用as指定模块的名称，以方便在代码中的使用
import 模块名1 as 模块别名
注意：模块别名 应该符合 大驼峰命名法


2)from...import导入
如果希望从某一个模块中，导入 部分 工具，就可以使用 from...import的方式
import 模块名 是 一次性 把模块中 所有工具全部导入，并且通过 模块名/别名 访问

#从模块 导入 某一个工具
from 模块名1 import 工具名

导入之后
不需要 通过 模块名. 的方式来使用
而直接可以通过使用 模块提供的工具——全局变量、函数、类

注意
如果两个模块，存在 同名的函数，那么 后导入模块的函数，就会覆盖掉 先前导入的函数

开发时 import 代码应该统一写在 代码的顶部，更容易及时发现冲突
一旦发现冲突，就可以使用as关键字 给其中一个工具起一个别名

from...import*（知道）

#从 模块 导入 所有工具
from 模块名1 import *

注意
这种方式并不推荐使用，因为函数重名并没有任何的提示，出现问题不好排查


1.3 模块的搜索顺序[扩展]
Python的解释器在 导入模块 时，会：
1.搜索 当前目录 指定模块名的文件，如果有就直接导入
2.如果没有，再搜索 系统目录(也就是Python在安装时自带的目录)

在开发时，给文件起名，不要和 系统的模块文件 重名

Python中每一个模块都有一个内置属性 __file__ 可以 查看模块 的完整路径

示例
import random

#生成一个0~10的数字
rand = random.randint(0,10)

print(rand)

注意：如果当前目录下，存在一个random.py 的文件夹，程序就无法正常执行了！
这个时候，Python的解释器会 加载当前目录 下的random.py 而不会加载 系统的 random模块


1.4原则——每一个文件都应该是可以被导入的
一个独立的Python文件 就是一个 模块
#模块可以被看作是工具包，可以向外界提供全局变量、函数、类 注意：直接执行的代码不是向外界提供的工具！
在导入文件时，文件中 所有没有任何缩进的代码 都会被执行一遍！

实际开发场景
在实际开发中，每一个模块都是独立开发的，大多都有专人负责
开发人员 通常会在 模块下方 增加一些测试代码

仅在模块内使用，而被导入到其他文件中不需要执行

__name__属性
__name__属性可以做到，测试模块的代码 只在测试情况下被运行，而在 被导入时
不会被执行！
__name__是Python的一个内置属性，记录着一个 字符串
如果 是被其他文件导入的，__name__就是模块名
如果 是当前执行的程序 __name__是__main__

#如果直接执行模块，print(__name__)就会得到__main__
if __name__ == "__main__":
	#相应测试代码
	print(__name__)

在许多Python文件中都会看到以下格式的代码：

#导入模块
#定义全局变量
#定义类
#定义函数

#在代码的最下方
def main():
	#...
	pass

#根据__name__判断是否执行下方代码
if __name__=="__main__":
	main()

#***
按照上述格式编写Python代码时，可以在main函数中作出相应的测试，并且能够确保该文件能够
作为模块被导入到其他的文件中被其他的文件重复使用







