01列表
1.1列表的定语
List(列表)是Python中使用最频繁的数据类型，在其他语言中通常叫做 数组
专门用于存储 一串信息
列表用[ ]定义，数据之间使用，分隔
列表的索引从 0 开始
索引 就是数据在 列表 中的位置编号，索引又可以被称为 下标
注意：从列表中取值的时候，如果 超出索引范围，程序会报错

列表中的索引值是从0开始的
len(列表)获取列表的长度n+1
列表.count(数据)数据在列表中出现的次数
列表.sort()升序排序
列表.sort(reverse=True)降序排序
列表.reverse()反转/逆序

列表[索引]	从列表中取值 
列表.index(数据)	获得数据第一次出现的索引
del 列表[索引] 	 删除指定索引的数据
列表.remove[数据]  	删除第一个出现的指定数据
列表.pop 	 删除末尾数据
列表.pop(索引)  	删除指定索引的数据
列表.insert(索引,数据)	  在指定位置插入数据
列表.append(数据)  	在末尾追加数据
列表.extend(列表2)  	将列表2的数据追加到列表1
列表.sort()		升序排序
列表.sort(reverse=True) 	 降序排序
列表.reverse() 	逆序、反转
len(列表)  	列表长度
列表.count(数据)		数据在列表中出现的次数

1.2列表常用操作
在ipython3中定义一个列表，例如 name_list = [ ]
输入 name_list，按下TAB键，ipython会提示 列表 能够使用的 方法

1.取值和取索引
如果知道数据的内容，想确定数据在列表中的位置
就需要使用index方法，namelist.index("xxx") 注意：如果传递的数据不在列表中 程序会报错！

2.修改
name_list[1] = "李四"

3.增加
#append 方法可以向列表的末尾追加数据
name_list.append("王小二")
#insert 方法可以向列表的指定索引位置插入数据
name_list.insert(1,"zhaowu")
#extend方法可以把其他列表中的完整内容，追加到当前列表的末尾
temp_list = ["zhang","liu","zhao"]
name_list.extend(temp_list)

4.删除
#remove方法可以从列表中删除指定的数据
name_list.remove("wangwu")
#pop 方法默认可以把列表中最后一个元素删除
name_list.pop() 

注意：在Pycharm中想了解函数的详情 可以使用快捷键ctrl+Q

#pop方法可以指定删除元素的索引
name_list.pop("wangxiaoer")

#clear方法可以清空列表
name_list.clear()

#(了解)使用 del 关键字(delete)删除列表元素
#提示：在日常开发中，想要从列表中删除数据，建议使用列表提供的方法
del name_list[1]
#del 关键字本质是用来将一个变量从内存中删除的
#如果使用del关键字将变量从内存中删除
后续的代码就不能再使用这个变量了

#len(length 长度)函数可以统计列表中元素的总数
#count方法可以统计列表中某一个数据出现的次数
list_len = len(name_list)
print("列表中包含 %d 个元素" % list_len)

#count方法可以统计列表中某一个数据出现的次数
count = name_list.count("张三")
print("张三出现了 %d 次"% count)

#从列表中删除第一次出现的数据，如果数据不存在，程序会报错
name_list.remove("zhangsan")

#升序
name_list.sort()
num_list.sort()

#降序
name_list.sort(reverse=True)

#逆序(反转)
name_list.reverse()

关键字、函数和方法(科普)
关键字是Python内置的、具有特殊意义的标识符
关键字后面不需要使用括号
函数 封装了 独立功能，可以直接调用
函数名(参数)
函数需要死记硬背

方法 和函数类似，同样是封装了独立的功能
方法需要通过对象来调用，表示针对这个 对象 需要做的操作

对象.方法名(参数)
在变量后面输入.，然后选择针对这个变量要执行的操作，记忆起来比函数要简单得多

1.3循环遍历
遍历 就是 从头到尾 依次 从 列表中获取数据
在循环体内部 针对 每一个元素，执行相同的操作
在Python中为了提高列表的遍历效率，专门提供的 迭代iteration遍历
使用for就能够实现迭代遍历

for 循环内部使用的变量 in 列表
for name in name_list:
	循环内部针对列表元素进行操作
	print(name)
#顺序地从列表中依次获取数据，每一次循环过程中，数据都会保存在my_name这个变量中，再循环体内部可以访问
到当前这一次获取到的数据
#使用迭代遍历列表
for my_name in name_list:
	print("我的名字叫 %s" % my_name)

应用场景
尽管Python的列表中可以存储不同类型的数据
但是在实际的开发中，更多地应用场景是
1.列表 存储相同的数据
2.通过 迭代遍历，在循环体内部，针对列表中的每一项元素，执行相同的操作




